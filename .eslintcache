[{"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\index.js":"1","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\App.js":"2","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsTemplateConfigurator.js":"3","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\UI\\Card.js":"4","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsConfigurator.js":"5","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\HandConfigurator.js":"6","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\Finger.js":"7","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\NailConfigurator.js":"8","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\axios.js":"9","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\AvailableSavedCreations.js":"10","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\SavedCreationForm.js":"11"},{"size":148,"mtime":1626200770980,"results":"12","hashOfConfig":"13"},{"size":896,"mtime":1626287469536,"results":"14","hashOfConfig":"13"},{"size":4991,"mtime":1626975326548,"results":"15","hashOfConfig":"13"},{"size":182,"mtime":1626200770979,"results":"16","hashOfConfig":"13"},{"size":865,"mtime":1626797806015,"results":"17","hashOfConfig":"13"},{"size":607,"mtime":1626289730496,"results":"18","hashOfConfig":"13"},{"size":551,"mtime":1626291686263,"results":"19","hashOfConfig":"13"},{"size":742,"mtime":1626971846299,"results":"20","hashOfConfig":"13"},{"size":201,"mtime":1626891852091,"results":"21","hashOfConfig":"13"},{"size":1745,"mtime":1626894649450,"results":"22","hashOfConfig":"13"},{"size":2016,"mtime":1626973434713,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"rpec42",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\index.js",[],["50","51"],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\App.js",["52","53"],"import React, {useState} from \"react\";\r\nimport HandsTemplateConfigurator from \"./components/HandsConfigurator/HandsTemplateConfigurator\";\r\n\r\nconst DUMMY_HANDS_TEMPLATE = [\r\n  {\r\n    id: \"e1\",\r\n    title: \"Toilet Paper\",\r\n    amount: 94.12,\r\n    date: new Date(2020, 7, 14),\r\n  },\r\n  { id: \"e2\", title: \"New TV\", amount: 799.49, date: new Date(2021, 2, 12) },\r\n  {\r\n    id: \"e3\",\r\n    title: \"Car Insurance\",\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: \"e4\",\r\n    title: \"New Desk (Wooden)\",\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\n\r\nconst App = () => {\r\n  const [savedTemplates, setHands] = useState(DUMMY_HANDS_TEMPLATE);\r\n\r\n  const saveHandsTemplate = (expense) => {\r\n    console.log('Template saved.')\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <HandsTemplateConfigurator items={savedTemplates} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsTemplateConfigurator.js",["54"],"import React, {useEffect, useState} from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport HandsConfigurator from \"./HandsConfigurator\";\r\nimport \"./HandsTemplateConfigurator.css\";\r\nimport NailConfigurator from \"../Hands/NailConfigurator\";\r\nimport instance from \"../../axios\";\r\nimport AvailableSavedCreations from \"../Hands/AvailableSavedCreations\";\r\nimport SavedCreationForm from \"../Hands/SavedCreationForm\";\r\n\r\nfunction HandsTemplateConfigurator(props) {\r\n    const initialFingerConfigurations = null;\r\n    const allFingerConfigurations = [];\r\n\r\n    const [allAvailableFingerConfigurations, setConfigurations] = useState(allFingerConfigurations);\r\n    const [fingerConfigurations, setFingers] = useState(initialFingerConfigurations);\r\n    const [selectedNail, setNail] = useState(null);\r\n    const [currentColor, setCurrentColor] = useState(null);\r\n\r\n    useEffect(() => {\r\n        instance\r\n            .get('http://localhost:8080/api/creation')\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setConfigurations(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n    const onChooseDifferent = (identifier) => {\r\n        console.log(\"Clicked different: \" + identifier);\r\n        instance\r\n            .get('http://localhost:8080/api/creation/' + identifier)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setFingers(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function saveHand(hand) {\r\n        instance\r\n            .post('http://localhost:8080/api/hand', hand)\r\n            .then(response => {\r\n                hand.fingers.forEach((finger) =>{\r\n                    saveFinger(finger);\r\n                })\r\n            }).catch((error) => {console.log(error);});\r\n    }\r\n\r\n    function saveFinger(finger) {\r\n        instance\r\n            .post('http://localhost:8080/api/finger', finger)\r\n            .then(response => {\r\n                console.log(response.data);\r\n            }).catch((error) => {console.log(error);});\r\n    }\r\n\r\n    const saveConfigurationOnServer = (name) => {\r\n        fingerConfigurations.name = name;\r\n        instance\r\n            .post('http://localhost:8080/api/creation', fingerConfigurations)\r\n            .then(response => {\r\n                saveHand(fingerConfigurations.right);\r\n                saveHand(fingerConfigurations.left);\r\n                \r\n            }).catch((error) => {console.log(error);});\r\n    };\r\n\r\n    const saveNailHandler = (nailData) => {\r\n        console.log(nailData);\r\n    };\r\n\r\n    const handleSelectNail = (hand, finger) => {\r\n        setNail(hand + ' ' + finger);\r\n    }\r\n\r\n    const handleChangeColor = (color, handfinger) => {\r\n        console.log(\"CLR : \" + color);\r\n        const arr = handfinger.split(' ');\r\n\r\n        const hand = arr[0];\r\n        const finger = arr[1];\r\n        setCurrentColor(color);\r\n\r\n        var singleHand = fingerConfigurations[hand.toLowerCase()]\r\n        for (var j = 0; j < singleHand.fingers.length; j++) {\r\n            var singleFinger = singleHand.fingers[j];\r\n            console.log(singleFinger)\r\n            if (singleFinger.label === finger) {\r\n                singleFinger.color = color;\r\n            }\r\n        }\r\n\r\n        setFingers(fingerConfigurations);\r\n    }\r\n\r\n    const getCurrentColor = () => {\r\n        return currentColor;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className=\"configurator\">\r\n                {\r\n                    fingerConfigurations != null ?\r\n                        (<HandsConfigurator\r\n                            initialFingers={fingerConfigurations}\r\n                            selectNail={handleSelectNail}\r\n                        />) : (<div/>)\r\n                }\r\n                {\r\n                    selectedNail != null ?\r\n                        (<NailConfigurator\r\n                            nail={selectedNail}\r\n                            saveHandler={saveNailHandler}\r\n                            changeColorHandler={handleChangeColor}\r\n                        />) : (<div/>)\r\n                }\r\n            </Card>\r\n            {\r\n                fingerConfigurations != null ?\r\n                    (<Card className=\"configurator-save-panel\">\r\n                        <SavedCreationForm\r\n                            creation={fingerConfigurations}\r\n                            onSaveConfiguration={saveConfigurationOnServer}\r\n                        />\r\n                    </Card>) : (<div/>)\r\n            }\r\n            <Card className=\"configurator-save-panel\">\r\n                <AvailableSavedCreations\r\n                    creations={allAvailableFingerConfigurations}\r\n                    onChangedCreation={onChooseDifferent}\r\n                />\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HandsTemplateConfigurator;\r\n","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\UI\\Card.js",[],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsConfigurator.js",[],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\HandConfigurator.js",[],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\Finger.js",[],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\NailConfigurator.js",["55","56"],"import React, {useState} from \"react\";\r\n\r\nimport \"./NailConfigurator.css\";\r\nimport {SketchPicker, SwatchesPicker} from \"react-color\";\r\n\r\nconst NailConfigurator = (props) => {\r\n    const availableColors = ['#fff', '#f00', '#0f0', '#00f', '#000'];\r\n    const [enteredColor, setColor] = useState(\"\");\r\n\r\n    const colorChengeHandler = (color, event) => {\r\n        setColor(color.hex);\r\n        props.changeColorHandler(color.hex, props.nail);\r\n    };\r\n\r\n    // npm install\r\n    return (\r\n        <div className=\"nail-configurator-panel\">\r\n            <label>Color</label>\r\n            <SwatchesPicker onChange={colorChengeHandler} hex={enteredColor}\r\n            height=\"368px\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NailConfigurator;\r\n","C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\axios.js",[],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\AvailableSavedCreations.js",[],"C:\\Users\\AmeN\\Projects\\01-starting-setup\\src\\components\\Hands\\SavedCreationForm.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":27,"column":26,"nodeType":"63","messageId":"64","endLine":27,"endColumn":34},{"ruleId":"61","severity":1,"message":"65","line":29,"column":9,"nodeType":"63","messageId":"64","endLine":29,"endColumn":26},{"ruleId":"61","severity":1,"message":"66","line":101,"column":11,"nodeType":"63","messageId":"64","endLine":101,"endColumn":26},{"ruleId":"61","severity":1,"message":"67","line":4,"column":9,"nodeType":"63","messageId":"64","endLine":4,"endColumn":21},{"ruleId":"61","severity":1,"message":"68","line":7,"column":11,"nodeType":"63","messageId":"64","endLine":7,"endColumn":26},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'setHands' is assigned a value but never used.","Identifier","unusedVar","'saveHandsTemplate' is assigned a value but never used.","'getCurrentColor' is assigned a value but never used.","'SketchPicker' is defined but never used.","'availableColors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]