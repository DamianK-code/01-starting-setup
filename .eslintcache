[{"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\index.js":"1","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\App.js":"2","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsTemplateConfigurator.js":"3","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\axios.js":"4","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsConfigurator.js":"5","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\UI\\Card.js":"6","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\AvailableSavedCreations.js":"7","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\SavedCreationForm.js":"8","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\NailConfigurator.js":"9","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\HandConfigurator.js":"10","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\Finger.js":"11"},{"size":147,"mtime":1627143953882,"results":"12","hashOfConfig":"13"},{"size":284,"mtime":1627143953937,"results":"14","hashOfConfig":"13"},{"size":6533,"mtime":1626977980726,"results":"15","hashOfConfig":"13"},{"size":201,"mtime":1626895033962,"results":"16","hashOfConfig":"13"},{"size":865,"mtime":1626895033972,"results":"17","hashOfConfig":"13"},{"size":186,"mtime":1627143953905,"results":"18","hashOfConfig":"13"},{"size":1781,"mtime":1627139792365,"results":"19","hashOfConfig":"13"},{"size":2046,"mtime":1626977981542,"results":"20","hashOfConfig":"13"},{"size":747,"mtime":1627324592904,"results":"21","hashOfConfig":"13"},{"size":607,"mtime":1626367005183,"results":"22","hashOfConfig":"13"},{"size":550,"mtime":1627143953947,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"dy6ugh",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\index.js",[],["49","50"],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\App.js",["51"],"import React, {useState} from \"react\";\r\nimport HandsTemplateConfigurator from \"./components/HandsConfigurator/HandsTemplateConfigurator\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <HandsTemplateConfigurator/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsTemplateConfigurator.js",["52"],"import React, {useEffect, useState} from \"react\";\r\nimport Card from \"../UI/Card\";\r\nimport HandsConfigurator from \"./HandsConfigurator\";\r\nimport \"./HandsTemplateConfigurator.css\";\r\nimport NailConfigurator from \"../Hands/NailConfigurator\";\r\nimport instance from \"../../axios\";\r\nimport AvailableSavedCreations from \"../Hands/AvailableSavedCreations\";\r\nimport SavedCreationForm from \"../Hands/SavedCreationForm\";\r\n\r\nfunction HandsTemplateConfigurator(props) {\r\n    const EMPTY_CONFIGURATION = {\r\n        identifier: null,\r\n        name: 'new',\r\n        right: {\r\n            identifier: null,\r\n            handSide: 'RIGHT',\r\n            fingers: [\r\n                {identifier: null, label: \"THUMB\", color: '#f00'},\r\n                {identifier: null, label: \"POINTING_FINGER\", color: '#f00'},\r\n                {identifier: null, label: \"MIDDLE_FINGER\", color: '#f00'},\r\n                {identifier: null, label: \"RING_FINGER\", color: '#f00'},\r\n                {identifier: null, label: \"LITTLE_FINGER\", color: '#f00'},\r\n            ]\r\n        },\r\n        left: {\r\n            identifier: null,\r\n            handSide: 'LEFT',\r\n            fingers: [\r\n                {identifier: null, label: \"THUMB\", color: '#f00'},\r\n                {identifier: null, label: \"POINTING_FINGER\", color: '#f00'},\r\n                {identifier: null, label: \"MIDDLE_FINGER\", color: '#f00'},\r\n                {identifier: null, label: \"RING_FINGER\", color: '#f00'},\r\n                {identifier: null, label: \"LITTLE_FINGER\", color: '#f00'},\r\n            ]\r\n        }\r\n    };\r\n    const initialFingerConfigurations = null;\r\n    const allFingerConfigurations = [];\r\n\r\n    const [allAvailableFingerConfigurations, setConfigurations] = useState(allFingerConfigurations);\r\n    const [fingerConfigurations, setFingers] = useState(initialFingerConfigurations);\r\n    const [selectedNail, setNail] = useState(null);\r\n    const [currentColor, setCurrentColor] = useState(null);\r\n\r\n    useEffect(() => {\r\n        loadConfigurations();\r\n    }, []);\r\n\r\n    const loadConfigurations = () => {\r\n        instance\r\n            .get('http://localhost:8080/api/creation')\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setConfigurations(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    const onChooseDifferent = (identifier) => {\r\n        console.log(\"Clicked different: \" + identifier);\r\n        instance\r\n            .get('http://localhost:8080/api/creation/' + identifier)\r\n            .then(response => {\r\n                console.log(response.data);\r\n                setFingers(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    function saveHand(hand) {\r\n        instance\r\n            .post('http://localhost:8080/api/hand', hand)\r\n            .then(response => {\r\n                hand.fingers.forEach((finger) =>{\r\n                    saveFinger(finger);\r\n                })\r\n            }).catch((error) => {console.log(error);});\r\n    }\r\n\r\n    const saveFinger = (finger) => {\r\n        instance\r\n            .post('http://localhost:8080/api/finger', finger)\r\n            .then(response => {\r\n                console.log(response.data);\r\n            }).catch((error) => {console.log(error);});\r\n    }\r\n\r\n    const saveConfigurationOnServer = (name) => {\r\n        fingerConfigurations.name = name;\r\n        instance\r\n            .post('http://localhost:8080/api/creation', fingerConfigurations)\r\n            .then(response => {\r\n                setFingers(response.data);\r\n                saveHand(fingerConfigurations.right);\r\n                saveHand(fingerConfigurations.left);\r\n                loadConfigurations();\r\n            }).catch((error) => {console.log(error);});\r\n    };\r\n\r\n    const saveNailHandler = (nailData) => {\r\n        console.log(nailData);\r\n    };\r\n\r\n    const handleSelectNail = (hand, finger) => {\r\n        setNail(hand + ' ' + finger);\r\n    }\r\n\r\n    const handleChangeColor = (color, handfinger) => {\r\n        console.log(\"CLR : \" + color);\r\n        const arr = handfinger.split(' ');\r\n\r\n        const hand = arr[0];\r\n        const finger = arr[1];\r\n        setCurrentColor(color);\r\n\r\n        var singleHand = fingerConfigurations[hand.toLowerCase()]\r\n        for (var j = 0; j < singleHand.fingers.length; j++) {\r\n            var singleFinger = singleHand.fingers[j];\r\n            console.log(singleFinger)\r\n            if (singleFinger.label === finger) {\r\n                singleFinger.color = color;\r\n            }\r\n        }\r\n\r\n        setFingers(fingerConfigurations);\r\n    }\r\n\r\n    const getCurrentColor = () => {\r\n        return currentColor;\r\n    }\r\n\r\n    const newConfiguration = () => {\r\n        setFingers(EMPTY_CONFIGURATION);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className=\"configurator\">\r\n                {\r\n                    fingerConfigurations != null ?\r\n                        (<HandsConfigurator\r\n                            initialFingers={fingerConfigurations}\r\n                            selectNail={handleSelectNail}\r\n                        />) : (<div/>)\r\n                }\r\n                {\r\n                    selectedNail != null ?\r\n                        (<NailConfigurator\r\n                            nail={selectedNail}\r\n                            saveHandler={saveNailHandler}\r\n                            changeColorHandler={handleChangeColor}\r\n                        />) : (<div/>)\r\n                }\r\n            </Card>\r\n            {\r\n                fingerConfigurations != null ?\r\n                    (<Card className=\"configurator-save-panel\">\r\n                        <SavedCreationForm\r\n                            creation={fingerConfigurations}\r\n                            onSaveConfiguration={saveConfigurationOnServer}\r\n                        />\r\n                    </Card>) : (<div/>)\r\n            }\r\n            <Card className=\"configurator-save-panel\">\r\n                <AvailableSavedCreations\r\n                    creations={allAvailableFingerConfigurations}\r\n                    onChangedCreation={onChooseDifferent}\r\n                />\r\n            </Card>\r\n            <Card className=\"configurator-save-panel\">\r\n                <button onClick={newConfiguration} className=\"my-new-configuration-button\">Create new, empty configuration</button>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HandsTemplateConfigurator;\r\n","C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\axios.js",[],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\HandsConfigurator\\HandsConfigurator.js",[],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\UI\\Card.js",[],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\AvailableSavedCreations.js",[],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\SavedCreationForm.js",[],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\NailConfigurator.js",["53"],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\HandConfigurator.js",[],"C:\\Users\\48660\\IdeaProjects\\Spring\\01-starting-setup\\src\\components\\Hands\\Finger.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":16,"nodeType":"60","messageId":"61","endLine":1,"endColumn":24},{"ruleId":"58","severity":1,"message":"62","line":84,"column":11,"nodeType":"60","messageId":"61","endLine":84,"endColumn":26},{"ruleId":"58","severity":1,"message":"63","line":7,"column":11,"nodeType":"60","messageId":"61","endLine":7,"endColumn":26},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getCurrentColor' is assigned a value but never used.","'availableColors' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]